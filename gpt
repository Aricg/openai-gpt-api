#!/usr/bin/env python

# Import required libraries
import openai
import sys
import argparse
import os
import configparser
import subprocess

# Define the dotfile path
dotfile_path = os.path.join(os.getcwd(), '.openai_config')

# Load the dotfile if it exists, otherwise create a new one
config = configparser.ConfigParser()
if os.path.exists(dotfile_path):
    config.read(dotfile_path)
else:
    config['DEFAULT'] = {
        'API_KEY': 'sk-your-api-key',
        'MODEL': 'gpt-3.5-turbo',
        'TEMPERATURE': '0.5'
    }
    with open(dotfile_path, 'w') as dotfile:
        config.write(dotfile)

# Set your OpenAI API key
openai.api_key = config['DEFAULT']['API_KEY']

# Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("--include-stdout", help="include stdout data in the chat completion", action="store_true")
parser.add_argument("--aicommit", help="create a git commit message", action="store_true")
parser.add_argument("--model", help="model to use for the chat completion", default=config['DEFAULT']['MODEL'])
parser.add_argument("--temperature", help="temperature to use for the chat completion", default=config['DEFAULT']['TEMPERATURE'], type=float)
args = parser.parse_args()

commit_message = "Here is a git commit please create a commit message for it and follow the standards for doing so\n"
user_message = input("Enter your additional instructions: ")

# Read from stdout if --include-stdout was provided
stdout_data = ""
if args.include_stdout:
    stdout_data = sys.stdin.read()

# Get git status if --aicommit was provided
git_status = ""
if args.aicommit:
    git_status = subprocess.check_output(['git', 'status', '-v']).decode()

# Prepare the message to be sent
message_content = commit_message + git_status + stdout_data + user_message

# Confirm before sending the message
print("\nHere is the message to be sent:\n")
print(message_content)
confirm = input("\nDo you want to send this message? [y/n/edit]: ")
if confirm.lower() == 'edit':
    message_content = input("\nPlease edit your message: ")
    confirm = input("\nDo you want to send this message? [y/n]: ")
if confirm.lower() != 'y':
    print("Operation cancelled.")
    sys.exit()

while True:
    # Create a chat completion with user message and stdout data
    chat_completion = openai.ChatCompletion.create(
        model=args.model, 
        messages=[{"role": "user", "content": message_content}],
        temperature=args.temperature
    )

    # Print the chat completion
    print(chat_completion.choices[0].message.content)

    # Check if user is satisfied with the response
    satisfied = input("\nAre you happy with the response? [y/n]: ")
    if satisfied.lower() == 'y':
        break
    else:
        print("Resending the request with model 'gpt-4'.")
        args.model = 'gpt-4'

